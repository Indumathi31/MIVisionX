// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe_protos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_caffe_5fprotos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_caffe_5fprotos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_caffe_5fprotos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_caffe_5fprotos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_caffe_5fprotos_2eproto;
namespace caffe_protos {
class AnnotatedDatum;
class AnnotatedDatumDefaultTypeInternal;
extern AnnotatedDatumDefaultTypeInternal _AnnotatedDatum_default_instance_;
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class AnnotationGroup;
class AnnotationGroupDefaultTypeInternal;
extern AnnotationGroupDefaultTypeInternal _AnnotationGroup_default_instance_;
class Datum;
class DatumDefaultTypeInternal;
extern DatumDefaultTypeInternal _Datum_default_instance_;
class NormalizedBBox;
class NormalizedBBoxDefaultTypeInternal;
extern NormalizedBBoxDefaultTypeInternal _NormalizedBBox_default_instance_;
}  // namespace caffe_protos
PROTOBUF_NAMESPACE_OPEN
template<> ::caffe_protos::AnnotatedDatum* Arena::CreateMaybeMessage<::caffe_protos::AnnotatedDatum>(Arena*);
template<> ::caffe_protos::Annotation* Arena::CreateMaybeMessage<::caffe_protos::Annotation>(Arena*);
template<> ::caffe_protos::AnnotationGroup* Arena::CreateMaybeMessage<::caffe_protos::AnnotationGroup>(Arena*);
template<> ::caffe_protos::Datum* Arena::CreateMaybeMessage<::caffe_protos::Datum>(Arena*);
template<> ::caffe_protos::NormalizedBBox* Arena::CreateMaybeMessage<::caffe_protos::NormalizedBBox>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace caffe_protos {

enum AnnotatedDatum_AnnotationType : int {
  AnnotatedDatum_AnnotationType_BBOX = 0
};
bool AnnotatedDatum_AnnotationType_IsValid(int value);
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum_AnnotationType_AnnotationType_MIN = AnnotatedDatum_AnnotationType_BBOX;
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum_AnnotationType_AnnotationType_MAX = AnnotatedDatum_AnnotationType_BBOX;
constexpr int AnnotatedDatum_AnnotationType_AnnotationType_ARRAYSIZE = AnnotatedDatum_AnnotationType_AnnotationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnnotatedDatum_AnnotationType_descriptor();
template<typename T>
inline const std::string& AnnotatedDatum_AnnotationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnnotatedDatum_AnnotationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnnotatedDatum_AnnotationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnnotatedDatum_AnnotationType_descriptor(), enum_t_value);
}
inline bool AnnotatedDatum_AnnotationType_Parse(
    const std::string& name, AnnotatedDatum_AnnotationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnnotatedDatum_AnnotationType>(
    AnnotatedDatum_AnnotationType_descriptor(), name, value);
}
// ===================================================================

class Datum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe_protos.Datum) */ {
 public:
  inline Datum() : Datum(nullptr) {};
  virtual ~Datum();

  Datum(const Datum& from);
  Datum(Datum&& from) noexcept
    : Datum() {
    *this = ::std::move(from);
  }

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Datum& operator=(Datum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Datum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Datum* internal_default_instance() {
    return reinterpret_cast<const Datum*>(
               &_Datum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Datum& a, Datum& b) {
    a.Swap(&b);
  }
  inline void Swap(Datum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Datum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Datum* New() const final {
    return CreateMaybeMessage<Datum>(nullptr);
  }

  Datum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Datum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Datum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe_protos.Datum";
  }
  protected:
  explicit Datum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_5fprotos_2eproto);
    return ::descriptor_table_caffe_5fprotos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatDataFieldNumber = 6,
    kLabelsFieldNumber = 8,
    kDataFieldNumber = 4,
    kChannelsFieldNumber = 1,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kLabelFieldNumber = 5,
    kEncodedFieldNumber = 7,
  };
  // repeated float float_data = 6;
  int float_data_size() const;
  private:
  int _internal_float_data_size() const;
  public:
  void clear_float_data();
  private:
  float _internal_float_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_data() const;
  void _internal_add_float_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_data();
  public:
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_data();

  // repeated float labels = 8;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  float _internal_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_labels() const;
  void _internal_add_labels(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_labels();
  public:
  float labels(int index) const;
  void set_labels(int index, float value);
  void add_labels(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_labels();

  // optional bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 channels = 1;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channels() const;
  void _internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::int32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool encoded = 7 [default = false];
  bool has_encoded() const;
  private:
  bool _internal_has_encoded() const;
  public:
  void clear_encoded();
  bool encoded() const;
  void set_encoded(bool value);
  private:
  bool _internal_encoded() const;
  void _internal_set_encoded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:caffe_protos.Datum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 label_;
  bool encoded_;
  friend struct ::TableStruct_caffe_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class NormalizedBBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe_protos.NormalizedBBox) */ {
 public:
  inline NormalizedBBox() : NormalizedBBox(nullptr) {};
  virtual ~NormalizedBBox();

  NormalizedBBox(const NormalizedBBox& from);
  NormalizedBBox(NormalizedBBox&& from) noexcept
    : NormalizedBBox() {
    *this = ::std::move(from);
  }

  inline NormalizedBBox& operator=(const NormalizedBBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizedBBox& operator=(NormalizedBBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NormalizedBBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizedBBox* internal_default_instance() {
    return reinterpret_cast<const NormalizedBBox*>(
               &_NormalizedBBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NormalizedBBox& a, NormalizedBBox& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizedBBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizedBBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizedBBox* New() const final {
    return CreateMaybeMessage<NormalizedBBox>(nullptr);
  }

  NormalizedBBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizedBBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizedBBox& from);
  void MergeFrom(const NormalizedBBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizedBBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe_protos.NormalizedBBox";
  }
  protected:
  explicit NormalizedBBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_5fprotos_2eproto);
    return ::descriptor_table_caffe_5fprotos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXminFieldNumber = 1,
    kYminFieldNumber = 2,
    kXmaxFieldNumber = 3,
    kYmaxFieldNumber = 4,
    kLabelFieldNumber = 5,
    kDifficultFieldNumber = 6,
    kScoreFieldNumber = 7,
    kSizeFieldNumber = 8,
  };
  // optional float xmin = 1;
  bool has_xmin() const;
  private:
  bool _internal_has_xmin() const;
  public:
  void clear_xmin();
  float xmin() const;
  void set_xmin(float value);
  private:
  float _internal_xmin() const;
  void _internal_set_xmin(float value);
  public:

  // optional float ymin = 2;
  bool has_ymin() const;
  private:
  bool _internal_has_ymin() const;
  public:
  void clear_ymin();
  float ymin() const;
  void set_ymin(float value);
  private:
  float _internal_ymin() const;
  void _internal_set_ymin(float value);
  public:

  // optional float xmax = 3;
  bool has_xmax() const;
  private:
  bool _internal_has_xmax() const;
  public:
  void clear_xmax();
  float xmax() const;
  void set_xmax(float value);
  private:
  float _internal_xmax() const;
  void _internal_set_xmax(float value);
  public:

  // optional float ymax = 4;
  bool has_ymax() const;
  private:
  bool _internal_has_ymax() const;
  public:
  void clear_ymax();
  float ymax() const;
  void set_ymax(float value);
  private:
  float _internal_ymax() const;
  void _internal_set_ymax(float value);
  public:

  // optional int32 label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::int32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool difficult = 6;
  bool has_difficult() const;
  private:
  bool _internal_has_difficult() const;
  public:
  void clear_difficult();
  bool difficult() const;
  void set_difficult(bool value);
  private:
  bool _internal_difficult() const;
  void _internal_set_difficult(bool value);
  public:

  // optional float score = 7;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional float size = 8;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // @@protoc_insertion_point(class_scope:caffe_protos.NormalizedBBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float xmin_;
  float ymin_;
  float xmax_;
  float ymax_;
  ::PROTOBUF_NAMESPACE_ID::int32 label_;
  bool difficult_;
  float score_;
  float size_;
  friend struct ::TableStruct_caffe_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class Annotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe_protos.Annotation) */ {
 public:
  inline Annotation() : Annotation(nullptr) {};
  virtual ~Annotation();

  Annotation(const Annotation& from);
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotation& operator=(Annotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Annotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Annotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Annotation* New() const final {
    return CreateMaybeMessage<Annotation>(nullptr);
  }

  Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe_protos.Annotation";
  }
  protected:
  explicit Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_5fprotos_2eproto);
    return ::descriptor_table_caffe_5fprotos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBboxFieldNumber = 2,
    kInstanceIdFieldNumber = 1,
  };
  // optional .caffe_protos.NormalizedBBox bbox = 2;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::caffe_protos::NormalizedBBox& bbox() const;
  ::caffe_protos::NormalizedBBox* release_bbox();
  ::caffe_protos::NormalizedBBox* mutable_bbox();
  void set_allocated_bbox(::caffe_protos::NormalizedBBox* bbox);
  private:
  const ::caffe_protos::NormalizedBBox& _internal_bbox() const;
  ::caffe_protos::NormalizedBBox* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::caffe_protos::NormalizedBBox* bbox);
  ::caffe_protos::NormalizedBBox* unsafe_arena_release_bbox();

  // optional int32 instance_id = 1 [default = 0];
  bool has_instance_id() const;
  private:
  bool _internal_has_instance_id() const;
  public:
  void clear_instance_id();
  ::PROTOBUF_NAMESPACE_ID::int32 instance_id() const;
  void set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instance_id() const;
  void _internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe_protos.Annotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::caffe_protos::NormalizedBBox* bbox_;
  ::PROTOBUF_NAMESPACE_ID::int32 instance_id_;
  friend struct ::TableStruct_caffe_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class AnnotationGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe_protos.AnnotationGroup) */ {
 public:
  inline AnnotationGroup() : AnnotationGroup(nullptr) {};
  virtual ~AnnotationGroup();

  AnnotationGroup(const AnnotationGroup& from);
  AnnotationGroup(AnnotationGroup&& from) noexcept
    : AnnotationGroup() {
    *this = ::std::move(from);
  }

  inline AnnotationGroup& operator=(const AnnotationGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotationGroup& operator=(AnnotationGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnnotationGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotationGroup* internal_default_instance() {
    return reinterpret_cast<const AnnotationGroup*>(
               &_AnnotationGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AnnotationGroup& a, AnnotationGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotationGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotationGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnnotationGroup* New() const final {
    return CreateMaybeMessage<AnnotationGroup>(nullptr);
  }

  AnnotationGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnnotationGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnnotationGroup& from);
  void MergeFrom(const AnnotationGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotationGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe_protos.AnnotationGroup";
  }
  protected:
  explicit AnnotationGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_5fprotos_2eproto);
    return ::descriptor_table_caffe_5fprotos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFieldNumber = 2,
    kGroupLabelFieldNumber = 1,
  };
  // repeated .caffe_protos.Annotation annotation = 2;
  int annotation_size() const;
  private:
  int _internal_annotation_size() const;
  public:
  void clear_annotation();
  ::caffe_protos::Annotation* mutable_annotation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe_protos::Annotation >*
      mutable_annotation();
  private:
  const ::caffe_protos::Annotation& _internal_annotation(int index) const;
  ::caffe_protos::Annotation* _internal_add_annotation();
  public:
  const ::caffe_protos::Annotation& annotation(int index) const;
  ::caffe_protos::Annotation* add_annotation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe_protos::Annotation >&
      annotation() const;

  // optional int32 group_label = 1;
  bool has_group_label() const;
  private:
  bool _internal_has_group_label() const;
  public:
  void clear_group_label();
  ::PROTOBUF_NAMESPACE_ID::int32 group_label() const;
  void set_group_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_label() const;
  void _internal_set_group_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe_protos.AnnotationGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe_protos::Annotation > annotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_label_;
  friend struct ::TableStruct_caffe_5fprotos_2eproto;
};
// -------------------------------------------------------------------

class AnnotatedDatum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe_protos.AnnotatedDatum) */ {
 public:
  inline AnnotatedDatum() : AnnotatedDatum(nullptr) {};
  virtual ~AnnotatedDatum();

  AnnotatedDatum(const AnnotatedDatum& from);
  AnnotatedDatum(AnnotatedDatum&& from) noexcept
    : AnnotatedDatum() {
    *this = ::std::move(from);
  }

  inline AnnotatedDatum& operator=(const AnnotatedDatum& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotatedDatum& operator=(AnnotatedDatum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnnotatedDatum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnnotatedDatum* internal_default_instance() {
    return reinterpret_cast<const AnnotatedDatum*>(
               &_AnnotatedDatum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnnotatedDatum& a, AnnotatedDatum& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotatedDatum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotatedDatum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnnotatedDatum* New() const final {
    return CreateMaybeMessage<AnnotatedDatum>(nullptr);
  }

  AnnotatedDatum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnnotatedDatum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnnotatedDatum& from);
  void MergeFrom(const AnnotatedDatum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotatedDatum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe_protos.AnnotatedDatum";
  }
  protected:
  explicit AnnotatedDatum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe_5fprotos_2eproto);
    return ::descriptor_table_caffe_5fprotos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AnnotatedDatum_AnnotationType AnnotationType;
  static constexpr AnnotationType BBOX =
    AnnotatedDatum_AnnotationType_BBOX;
  static inline bool AnnotationType_IsValid(int value) {
    return AnnotatedDatum_AnnotationType_IsValid(value);
  }
  static constexpr AnnotationType AnnotationType_MIN =
    AnnotatedDatum_AnnotationType_AnnotationType_MIN;
  static constexpr AnnotationType AnnotationType_MAX =
    AnnotatedDatum_AnnotationType_AnnotationType_MAX;
  static constexpr int AnnotationType_ARRAYSIZE =
    AnnotatedDatum_AnnotationType_AnnotationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AnnotationType_descriptor() {
    return AnnotatedDatum_AnnotationType_descriptor();
  }
  template<typename T>
  static inline const std::string& AnnotationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AnnotationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AnnotationType_Name.");
    return AnnotatedDatum_AnnotationType_Name(enum_t_value);
  }
  static inline bool AnnotationType_Parse(const std::string& name,
      AnnotationType* value) {
    return AnnotatedDatum_AnnotationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationGroupFieldNumber = 3,
    kDatumFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .caffe_protos.AnnotationGroup annotation_group = 3;
  int annotation_group_size() const;
  private:
  int _internal_annotation_group_size() const;
  public:
  void clear_annotation_group();
  ::caffe_protos::AnnotationGroup* mutable_annotation_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe_protos::AnnotationGroup >*
      mutable_annotation_group();
  private:
  const ::caffe_protos::AnnotationGroup& _internal_annotation_group(int index) const;
  ::caffe_protos::AnnotationGroup* _internal_add_annotation_group();
  public:
  const ::caffe_protos::AnnotationGroup& annotation_group(int index) const;
  ::caffe_protos::AnnotationGroup* add_annotation_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe_protos::AnnotationGroup >&
      annotation_group() const;

  // optional .caffe_protos.Datum datum = 1;
  bool has_datum() const;
  private:
  bool _internal_has_datum() const;
  public:
  void clear_datum();
  const ::caffe_protos::Datum& datum() const;
  ::caffe_protos::Datum* release_datum();
  ::caffe_protos::Datum* mutable_datum();
  void set_allocated_datum(::caffe_protos::Datum* datum);
  private:
  const ::caffe_protos::Datum& _internal_datum() const;
  ::caffe_protos::Datum* _internal_mutable_datum();
  public:
  void unsafe_arena_set_allocated_datum(
      ::caffe_protos::Datum* datum);
  ::caffe_protos::Datum* unsafe_arena_release_datum();

  // optional .caffe_protos.AnnotatedDatum.AnnotationType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::caffe_protos::AnnotatedDatum_AnnotationType type() const;
  void set_type(::caffe_protos::AnnotatedDatum_AnnotationType value);
  private:
  ::caffe_protos::AnnotatedDatum_AnnotationType _internal_type() const;
  void _internal_set_type(::caffe_protos::AnnotatedDatum_AnnotationType value);
  public:

  // @@protoc_insertion_point(class_scope:caffe_protos.AnnotatedDatum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe_protos::AnnotationGroup > annotation_group_;
  ::caffe_protos::Datum* datum_;
  int type_;
  friend struct ::TableStruct_caffe_5fprotos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Datum

// optional int32 channels = 1;
inline bool Datum::_internal_has_channels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Datum::has_channels() const {
  return _internal_has_channels();
}
inline void Datum::clear_channels() {
  channels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_channels() const {
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe_protos.Datum.channels)
  return _internal_channels();
}
inline void Datum::_internal_set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  channels_ = value;
}
inline void Datum::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:caffe_protos.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Datum::has_height() const {
  return _internal_has_height();
}
inline void Datum::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe_protos.Datum.height)
  return _internal_height();
}
inline void Datum::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void Datum::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:caffe_protos.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Datum::has_width() const {
  return _internal_has_width();
}
inline void Datum::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe_protos.Datum.width)
  return _internal_width();
}
inline void Datum::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void Datum::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:caffe_protos.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Datum::has_data() const {
  return _internal_has_data();
}
inline void Datum::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe_protos.Datum.data)
  return _internal_data();
}
inline void Datum::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:caffe_protos.Datum.data)
}
inline std::string* Datum::mutable_data() {
  // @@protoc_insertion_point(field_mutable:caffe_protos.Datum.data)
  return _internal_mutable_data();
}
inline const std::string& Datum::_internal_data() const {
  return data_.Get();
}
inline void Datum::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Datum::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe_protos.Datum.data)
}
inline void Datum::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe_protos.Datum.data)
}
inline void Datum::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe_protos.Datum.data)
}
inline std::string* Datum::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe_protos.Datum.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Datum::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe_protos.Datum.data)
}
inline std::string* Datum::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:caffe_protos.Datum.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Datum::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:caffe_protos.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Datum::has_label() const {
  return _internal_has_label();
}
inline void Datum::clear_label() {
  label_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe_protos.Datum.label)
  return _internal_label();
}
inline void Datum::_internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  label_ = value;
}
inline void Datum::set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:caffe_protos.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::_internal_float_data_size() const {
  return float_data_.size();
}
inline int Datum::float_data_size() const {
  return _internal_float_data_size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::_internal_float_data(int index) const {
  return float_data_.Get(index);
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe_protos.Datum.float_data)
  return _internal_float_data(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_protos.Datum.float_data)
}
inline void Datum::_internal_add_float_data(float value) {
  float_data_.Add(value);
}
inline void Datum::add_float_data(float value) {
  _internal_add_float_data(value);
  // @@protoc_insertion_point(field_add:caffe_protos.Datum.float_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Datum::_internal_float_data() const {
  return float_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe_protos.Datum.float_data)
  return _internal_float_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Datum::_internal_mutable_float_data() {
  return &float_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe_protos.Datum.float_data)
  return _internal_mutable_float_data();
}

// optional bool encoded = 7 [default = false];
inline bool Datum::_internal_has_encoded() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Datum::has_encoded() const {
  return _internal_has_encoded();
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Datum::_internal_encoded() const {
  return encoded_;
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe_protos.Datum.encoded)
  return _internal_encoded();
}
inline void Datum::_internal_set_encoded(bool value) {
  _has_bits_[0] |= 0x00000020u;
  encoded_ = value;
}
inline void Datum::set_encoded(bool value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:caffe_protos.Datum.encoded)
}

// repeated float labels = 8;
inline int Datum::_internal_labels_size() const {
  return labels_.size();
}
inline int Datum::labels_size() const {
  return _internal_labels_size();
}
inline void Datum::clear_labels() {
  labels_.Clear();
}
inline float Datum::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline float Datum::labels(int index) const {
  // @@protoc_insertion_point(field_get:caffe_protos.Datum.labels)
  return _internal_labels(index);
}
inline void Datum::set_labels(int index, float value) {
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe_protos.Datum.labels)
}
inline void Datum::_internal_add_labels(float value) {
  labels_.Add(value);
}
inline void Datum::add_labels(float value) {
  _internal_add_labels(value);
  // @@protoc_insertion_point(field_add:caffe_protos.Datum.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Datum::_internal_labels() const {
  return labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Datum::labels() const {
  // @@protoc_insertion_point(field_list:caffe_protos.Datum.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Datum::_internal_mutable_labels() {
  return &labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Datum::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:caffe_protos.Datum.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// NormalizedBBox

// optional float xmin = 1;
inline bool NormalizedBBox::_internal_has_xmin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NormalizedBBox::has_xmin() const {
  return _internal_has_xmin();
}
inline void NormalizedBBox::clear_xmin() {
  xmin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float NormalizedBBox::_internal_xmin() const {
  return xmin_;
}
inline float NormalizedBBox::xmin() const {
  // @@protoc_insertion_point(field_get:caffe_protos.NormalizedBBox.xmin)
  return _internal_xmin();
}
inline void NormalizedBBox::_internal_set_xmin(float value) {
  _has_bits_[0] |= 0x00000001u;
  xmin_ = value;
}
inline void NormalizedBBox::set_xmin(float value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:caffe_protos.NormalizedBBox.xmin)
}

// optional float ymin = 2;
inline bool NormalizedBBox::_internal_has_ymin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NormalizedBBox::has_ymin() const {
  return _internal_has_ymin();
}
inline void NormalizedBBox::clear_ymin() {
  ymin_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float NormalizedBBox::_internal_ymin() const {
  return ymin_;
}
inline float NormalizedBBox::ymin() const {
  // @@protoc_insertion_point(field_get:caffe_protos.NormalizedBBox.ymin)
  return _internal_ymin();
}
inline void NormalizedBBox::_internal_set_ymin(float value) {
  _has_bits_[0] |= 0x00000002u;
  ymin_ = value;
}
inline void NormalizedBBox::set_ymin(float value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:caffe_protos.NormalizedBBox.ymin)
}

// optional float xmax = 3;
inline bool NormalizedBBox::_internal_has_xmax() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NormalizedBBox::has_xmax() const {
  return _internal_has_xmax();
}
inline void NormalizedBBox::clear_xmax() {
  xmax_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float NormalizedBBox::_internal_xmax() const {
  return xmax_;
}
inline float NormalizedBBox::xmax() const {
  // @@protoc_insertion_point(field_get:caffe_protos.NormalizedBBox.xmax)
  return _internal_xmax();
}
inline void NormalizedBBox::_internal_set_xmax(float value) {
  _has_bits_[0] |= 0x00000004u;
  xmax_ = value;
}
inline void NormalizedBBox::set_xmax(float value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:caffe_protos.NormalizedBBox.xmax)
}

// optional float ymax = 4;
inline bool NormalizedBBox::_internal_has_ymax() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NormalizedBBox::has_ymax() const {
  return _internal_has_ymax();
}
inline void NormalizedBBox::clear_ymax() {
  ymax_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float NormalizedBBox::_internal_ymax() const {
  return ymax_;
}
inline float NormalizedBBox::ymax() const {
  // @@protoc_insertion_point(field_get:caffe_protos.NormalizedBBox.ymax)
  return _internal_ymax();
}
inline void NormalizedBBox::_internal_set_ymax(float value) {
  _has_bits_[0] |= 0x00000008u;
  ymax_ = value;
}
inline void NormalizedBBox::set_ymax(float value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:caffe_protos.NormalizedBBox.ymax)
}

// optional int32 label = 5;
inline bool NormalizedBBox::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NormalizedBBox::has_label() const {
  return _internal_has_label();
}
inline void NormalizedBBox::clear_label() {
  label_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NormalizedBBox::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NormalizedBBox::label() const {
  // @@protoc_insertion_point(field_get:caffe_protos.NormalizedBBox.label)
  return _internal_label();
}
inline void NormalizedBBox::_internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  label_ = value;
}
inline void NormalizedBBox::set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:caffe_protos.NormalizedBBox.label)
}

// optional bool difficult = 6;
inline bool NormalizedBBox::_internal_has_difficult() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NormalizedBBox::has_difficult() const {
  return _internal_has_difficult();
}
inline void NormalizedBBox::clear_difficult() {
  difficult_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool NormalizedBBox::_internal_difficult() const {
  return difficult_;
}
inline bool NormalizedBBox::difficult() const {
  // @@protoc_insertion_point(field_get:caffe_protos.NormalizedBBox.difficult)
  return _internal_difficult();
}
inline void NormalizedBBox::_internal_set_difficult(bool value) {
  _has_bits_[0] |= 0x00000020u;
  difficult_ = value;
}
inline void NormalizedBBox::set_difficult(bool value) {
  _internal_set_difficult(value);
  // @@protoc_insertion_point(field_set:caffe_protos.NormalizedBBox.difficult)
}

// optional float score = 7;
inline bool NormalizedBBox::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NormalizedBBox::has_score() const {
  return _internal_has_score();
}
inline void NormalizedBBox::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float NormalizedBBox::_internal_score() const {
  return score_;
}
inline float NormalizedBBox::score() const {
  // @@protoc_insertion_point(field_get:caffe_protos.NormalizedBBox.score)
  return _internal_score();
}
inline void NormalizedBBox::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000040u;
  score_ = value;
}
inline void NormalizedBBox::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:caffe_protos.NormalizedBBox.score)
}

// optional float size = 8;
inline bool NormalizedBBox::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NormalizedBBox::has_size() const {
  return _internal_has_size();
}
inline void NormalizedBBox::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float NormalizedBBox::_internal_size() const {
  return size_;
}
inline float NormalizedBBox::size() const {
  // @@protoc_insertion_point(field_get:caffe_protos.NormalizedBBox.size)
  return _internal_size();
}
inline void NormalizedBBox::_internal_set_size(float value) {
  _has_bits_[0] |= 0x00000080u;
  size_ = value;
}
inline void NormalizedBBox::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:caffe_protos.NormalizedBBox.size)
}

// -------------------------------------------------------------------

// Annotation

// optional int32 instance_id = 1 [default = 0];
inline bool Annotation::_internal_has_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Annotation::has_instance_id() const {
  return _internal_has_instance_id();
}
inline void Annotation::clear_instance_id() {
  instance_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Annotation::_internal_instance_id() const {
  return instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Annotation::instance_id() const {
  // @@protoc_insertion_point(field_get:caffe_protos.Annotation.instance_id)
  return _internal_instance_id();
}
inline void Annotation::_internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  instance_id_ = value;
}
inline void Annotation::set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:caffe_protos.Annotation.instance_id)
}

// optional .caffe_protos.NormalizedBBox bbox = 2;
inline bool Annotation::_internal_has_bbox() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bbox_ != nullptr);
  return value;
}
inline bool Annotation::has_bbox() const {
  return _internal_has_bbox();
}
inline void Annotation::clear_bbox() {
  if (bbox_ != nullptr) bbox_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::caffe_protos::NormalizedBBox& Annotation::_internal_bbox() const {
  const ::caffe_protos::NormalizedBBox* p = bbox_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe_protos::NormalizedBBox*>(
      &::caffe_protos::_NormalizedBBox_default_instance_);
}
inline const ::caffe_protos::NormalizedBBox& Annotation::bbox() const {
  // @@protoc_insertion_point(field_get:caffe_protos.Annotation.bbox)
  return _internal_bbox();
}
inline void Annotation::unsafe_arena_set_allocated_bbox(
    ::caffe_protos::NormalizedBBox* bbox) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox_);
  }
  bbox_ = bbox;
  if (bbox) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:caffe_protos.Annotation.bbox)
}
inline ::caffe_protos::NormalizedBBox* Annotation::release_bbox() {
  auto temp = unsafe_arena_release_bbox();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::caffe_protos::NormalizedBBox* Annotation::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:caffe_protos.Annotation.bbox)
  _has_bits_[0] &= ~0x00000001u;
  ::caffe_protos::NormalizedBBox* temp = bbox_;
  bbox_ = nullptr;
  return temp;
}
inline ::caffe_protos::NormalizedBBox* Annotation::_internal_mutable_bbox() {
  _has_bits_[0] |= 0x00000001u;
  if (bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe_protos::NormalizedBBox>(GetArena());
    bbox_ = p;
  }
  return bbox_;
}
inline ::caffe_protos::NormalizedBBox* Annotation::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable:caffe_protos.Annotation.bbox)
  return _internal_mutable_bbox();
}
inline void Annotation::set_allocated_bbox(::caffe_protos::NormalizedBBox* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bbox_;
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bbox);
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:caffe_protos.Annotation.bbox)
}

// -------------------------------------------------------------------

// AnnotationGroup

// optional int32 group_label = 1;
inline bool AnnotationGroup::_internal_has_group_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnnotationGroup::has_group_label() const {
  return _internal_has_group_label();
}
inline void AnnotationGroup::clear_group_label() {
  group_label_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnnotationGroup::_internal_group_label() const {
  return group_label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnnotationGroup::group_label() const {
  // @@protoc_insertion_point(field_get:caffe_protos.AnnotationGroup.group_label)
  return _internal_group_label();
}
inline void AnnotationGroup::_internal_set_group_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  group_label_ = value;
}
inline void AnnotationGroup::set_group_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_label(value);
  // @@protoc_insertion_point(field_set:caffe_protos.AnnotationGroup.group_label)
}

// repeated .caffe_protos.Annotation annotation = 2;
inline int AnnotationGroup::_internal_annotation_size() const {
  return annotation_.size();
}
inline int AnnotationGroup::annotation_size() const {
  return _internal_annotation_size();
}
inline void AnnotationGroup::clear_annotation() {
  annotation_.Clear();
}
inline ::caffe_protos::Annotation* AnnotationGroup::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:caffe_protos.AnnotationGroup.annotation)
  return annotation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe_protos::Annotation >*
AnnotationGroup::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:caffe_protos.AnnotationGroup.annotation)
  return &annotation_;
}
inline const ::caffe_protos::Annotation& AnnotationGroup::_internal_annotation(int index) const {
  return annotation_.Get(index);
}
inline const ::caffe_protos::Annotation& AnnotationGroup::annotation(int index) const {
  // @@protoc_insertion_point(field_get:caffe_protos.AnnotationGroup.annotation)
  return _internal_annotation(index);
}
inline ::caffe_protos::Annotation* AnnotationGroup::_internal_add_annotation() {
  return annotation_.Add();
}
inline ::caffe_protos::Annotation* AnnotationGroup::add_annotation() {
  // @@protoc_insertion_point(field_add:caffe_protos.AnnotationGroup.annotation)
  return _internal_add_annotation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe_protos::Annotation >&
AnnotationGroup::annotation() const {
  // @@protoc_insertion_point(field_list:caffe_protos.AnnotationGroup.annotation)
  return annotation_;
}

// -------------------------------------------------------------------

// AnnotatedDatum

// optional .caffe_protos.Datum datum = 1;
inline bool AnnotatedDatum::_internal_has_datum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || datum_ != nullptr);
  return value;
}
inline bool AnnotatedDatum::has_datum() const {
  return _internal_has_datum();
}
inline void AnnotatedDatum::clear_datum() {
  if (datum_ != nullptr) datum_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::caffe_protos::Datum& AnnotatedDatum::_internal_datum() const {
  const ::caffe_protos::Datum* p = datum_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe_protos::Datum*>(
      &::caffe_protos::_Datum_default_instance_);
}
inline const ::caffe_protos::Datum& AnnotatedDatum::datum() const {
  // @@protoc_insertion_point(field_get:caffe_protos.AnnotatedDatum.datum)
  return _internal_datum();
}
inline void AnnotatedDatum::unsafe_arena_set_allocated_datum(
    ::caffe_protos::Datum* datum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datum_);
  }
  datum_ = datum;
  if (datum) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:caffe_protos.AnnotatedDatum.datum)
}
inline ::caffe_protos::Datum* AnnotatedDatum::release_datum() {
  auto temp = unsafe_arena_release_datum();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::caffe_protos::Datum* AnnotatedDatum::unsafe_arena_release_datum() {
  // @@protoc_insertion_point(field_release:caffe_protos.AnnotatedDatum.datum)
  _has_bits_[0] &= ~0x00000001u;
  ::caffe_protos::Datum* temp = datum_;
  datum_ = nullptr;
  return temp;
}
inline ::caffe_protos::Datum* AnnotatedDatum::_internal_mutable_datum() {
  _has_bits_[0] |= 0x00000001u;
  if (datum_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe_protos::Datum>(GetArena());
    datum_ = p;
  }
  return datum_;
}
inline ::caffe_protos::Datum* AnnotatedDatum::mutable_datum() {
  // @@protoc_insertion_point(field_mutable:caffe_protos.AnnotatedDatum.datum)
  return _internal_mutable_datum();
}
inline void AnnotatedDatum::set_allocated_datum(::caffe_protos::Datum* datum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete datum_;
  }
  if (datum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(datum);
    if (message_arena != submessage_arena) {
      datum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datum, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  datum_ = datum;
  // @@protoc_insertion_point(field_set_allocated:caffe_protos.AnnotatedDatum.datum)
}

// optional .caffe_protos.AnnotatedDatum.AnnotationType type = 2;
inline bool AnnotatedDatum::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AnnotatedDatum::has_type() const {
  return _internal_has_type();
}
inline void AnnotatedDatum::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::caffe_protos::AnnotatedDatum_AnnotationType AnnotatedDatum::_internal_type() const {
  return static_cast< ::caffe_protos::AnnotatedDatum_AnnotationType >(type_);
}
inline ::caffe_protos::AnnotatedDatum_AnnotationType AnnotatedDatum::type() const {
  // @@protoc_insertion_point(field_get:caffe_protos.AnnotatedDatum.type)
  return _internal_type();
}
inline void AnnotatedDatum::_internal_set_type(::caffe_protos::AnnotatedDatum_AnnotationType value) {
  assert(::caffe_protos::AnnotatedDatum_AnnotationType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void AnnotatedDatum::set_type(::caffe_protos::AnnotatedDatum_AnnotationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:caffe_protos.AnnotatedDatum.type)
}

// repeated .caffe_protos.AnnotationGroup annotation_group = 3;
inline int AnnotatedDatum::_internal_annotation_group_size() const {
  return annotation_group_.size();
}
inline int AnnotatedDatum::annotation_group_size() const {
  return _internal_annotation_group_size();
}
inline void AnnotatedDatum::clear_annotation_group() {
  annotation_group_.Clear();
}
inline ::caffe_protos::AnnotationGroup* AnnotatedDatum::mutable_annotation_group(int index) {
  // @@protoc_insertion_point(field_mutable:caffe_protos.AnnotatedDatum.annotation_group)
  return annotation_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe_protos::AnnotationGroup >*
AnnotatedDatum::mutable_annotation_group() {
  // @@protoc_insertion_point(field_mutable_list:caffe_protos.AnnotatedDatum.annotation_group)
  return &annotation_group_;
}
inline const ::caffe_protos::AnnotationGroup& AnnotatedDatum::_internal_annotation_group(int index) const {
  return annotation_group_.Get(index);
}
inline const ::caffe_protos::AnnotationGroup& AnnotatedDatum::annotation_group(int index) const {
  // @@protoc_insertion_point(field_get:caffe_protos.AnnotatedDatum.annotation_group)
  return _internal_annotation_group(index);
}
inline ::caffe_protos::AnnotationGroup* AnnotatedDatum::_internal_add_annotation_group() {
  return annotation_group_.Add();
}
inline ::caffe_protos::AnnotationGroup* AnnotatedDatum::add_annotation_group() {
  // @@protoc_insertion_point(field_add:caffe_protos.AnnotatedDatum.annotation_group)
  return _internal_add_annotation_group();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe_protos::AnnotationGroup >&
AnnotatedDatum::annotation_group() const {
  // @@protoc_insertion_point(field_list:caffe_protos.AnnotatedDatum.annotation_group)
  return annotation_group_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe_protos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::caffe_protos::AnnotatedDatum_AnnotationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe_protos::AnnotatedDatum_AnnotationType>() {
  return ::caffe_protos::AnnotatedDatum_AnnotationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_caffe_5fprotos_2eproto
